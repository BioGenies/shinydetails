library(HaDeX)
library(dplyr)
dat_raw <- read_hdx(system.file(package = "HaDeX", "HaDeX/data/KD_180110_CD160_HVEM.csv"))
chosen_protein <- unique(dat_raw[["Protein"]]) #input
chosen_state <- unique(dat_raw[["State"]])[[1]]
start_seq <- min(dat_raw[["Start"]]) # input
end_seq <- max(dat_raw[["End"]]) # input
protein_sequence <- reconstruct_sequence(filter(dat_raw, Protein == chosen_protein))
prepated_distribution_dat <- generate_overlap_distribution_data(dat_raw,
protein = chosen_protein,
state = chosen_state,
start = start_seq,
end = end_seq,
protein_sequence = protein_sequence)
# comparison plot
library(HaDeX)
library(dplyr)
dat_raw <- read_hdx(system.file(package = "HaDeX", "HaDeX/data/KD_180110_CD160_HVEM.csv"))
states_from_file <- unique(dat_raw[["State"]]) #reactive
chosen_protein <- unique(dat_raw[["Protein"]]) #input
in_time <- 0.001 #input
chosen_time <- 5 #input
out_time <- 1440 #input
deut_concentration <- 100 #input
prepared_dat <- bind_rows(lapply(states_from_file, function(i) calculate_state_deuteration(dat_raw,
protein = chosen_protein,
state = i,
time_in = in_time,
time_chosen = chosen_time,
time_out = out_time,
deut_part = 0.01*deut_concentration)))
generate_comparison_plot(prepared_dat,
theoretical = FALSE, #input
relative = TRUE) #input
shiny::runApp('shinyKrysia/R')
runApp('shinyKrysia/R')
runApp('shinyKrysia/R')
# differential plot / woods plot
library(HaDeX)
dat_raw <- read_hdx(system.file(package = "HaDeX", "HaDeX/data/KD_180110_CD160_HVEM.csv"))
two_states <- unique(dat_raw[["State"]]) # input
chosen_protein <- unique(dat_raw[["Protein"]]) # input
in_time <- 0.001 #input
chosen_time <- 5 #input
out_time <- 1440 #input
deut_concentration <- 100 #input
prepared_differential_dat <- generate_differential_data_set(dat = dat_raw,
states = two_states,
protein = chosen_protein,
time_in = in_time,
time_chosen = chosen_time,
time_out = out_time,
deut_part = 0.01*deut_concentration)
runApp('shinyKrysia/R')
runApp('shinyKrysia/R')
runApp('shinyKrysia/R')
runApp('shinyKrysia/R')
runApp('shinyKrysia/R')
runApp('shinyKrysia/R')
runApp('shinyKrysia/R')
runApp('shinyKrysia/R')
runApp('shinyKrysia/R')
library(HaDeX)
library(dplyr)
dat_raw <- read_hdx(system.file(package = "HaDeX", "HaDeX/data/KD_180110_CD160_HVEM.csv"))
chosen_protein <- unique(dat_raw[["Protein"]]) #input
chosen_state <- unique(dat_raw[["State"]])[[1]]
start_seq <- min(dat_raw[["Start"]]) # input
end_seq <- max(dat_raw[["End"]]) # input
protein_sequence <- reconstruct_sequence(filter(dat_raw, Protein == chosen_protein))
prepated_distribution_dat <- generate_overlap_distribution_data(dat_raw,
protein = chosen_protein,
state = chosen_state,
start = start_seq,
end = end_seq,
protein_sequence = protein_sequence)
runApp('shinyKrysia/R')
runApp('shinyKrysia/R')
runApp('shinyKrysia/R')
install.packages("stringr")
shiny::runApp('shinyKrysia/R')
runApp('shinyKrysia/R')
runApp('shinyKrysia/R')
runApp('shinyKrysia/R')
runApp('shinyKrysia/R')
runApp('shinyKrysia/R')
runApp('shinyKrysia/R')
runApp('shinyKrysia/R')
runApp('shinyKrysia/R')
runApp('shinyKrysia/R')
runApp('shinyKrysia/R')
runApp('shinyKrysia/R')
runApp('shinyKrysia/R')
runApp('shinyKrysia/R')
iris
iris[, -"Species"]
iris[, c(-"Species")]
c(-"a", -"b")
c(1, 2) %in% c(3, 4, 5, 2, 1)
c(0, 2) %in% c(3, 4, 5, 2, 1)
runApp('shinyKrysia/R')
runApp('shinyKrysia/R')
runApp('shinyKrysia/R')
runApp('shinyKrysia/R')
runApp('shinyKrysia/R')
runApp('shinyKrysia/R')
runApp('shinyKrysia/R')
is.null(NULL)
runApp('shinyKrysia/R')
runApp('shinyKrysia/R')
runApp('shinyKrysia/R')
runApp('shinyKrysia/R')
runApp('shinyKrysia/R')
runApp('shinyKrysia/R')
