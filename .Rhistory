library(shiny); runApp('C:/Users/Kanti/Desktop/SandalenCamp2021/weird-shiny-components/zad2.R')
runApp('C:/Users/Kanti/Desktop/SandalenCamp2021/weird-shiny-components/zad2.R')
runApp('C:/Users/Kanti/Desktop/SandalenCamp2021/weird-shiny-components/zad2.R')
runApp('C:/Users/Kanti/Desktop/SandalenCamp2021/weird-shiny-components/zad2.R')
a = list(a = 1, b = 2)
a
unlist(a)
a
x = unlist(a)
x
x[1]
tagList
dots_list(x, a)
tagList(mean, mean)
library(shiny)
library(shinycssloaders)
library(shinyhelper)
library(ggplot2)
tagList(mean(), mean())
tagList(mean(x), mean(x))
list(x, tagList(mean(x), mean(x)))
tagList(mean(x), mean(x))
tagList(c(mean(x), mean(x)))
tagList(list(mean(x), mean(x)))
mean(x)
example = list(a = list(1, 3, 3))
example
example$a
example$a[1]
example = list(a = list(1, 3, 3), b = 5)
example
tagList(example)
lapply(1:10, function(i) { i^2})
lapply(1:5, function(i) { i^2})
lapply(1:5, function(i) {
i^2
i+1
})
server <- function(input, output) {
observe_helpers(session = shiny::getDefaultReactiveDomain(),
help_dir = "helpfiles")
output[["data_frame"]] <- renderTable({
Orange[as.numeric(as.vector(Orange[["Tree"]])) %in% 1:input[["n_trees"]], ]
})
output[["orange_plot"]] <- renderPlot({
set.seed(17)
ggplot(Orange[as.numeric(as.vector(Orange[["Tree"]])) %in% 1:input[["n_trees"]], ],
aes(x = age, y = circumference, col = Tree ))+
geom_point()
})
output[["orange_tooltip"]] <- renderUI({generate_tooltip(Orange, input[["orange_hover"]])})
}
runApp('try1.R')
runApp('try1.R')
runApp('try1.R')
runApp('try1.R')
runApp('try1.R')
runApp('try1.R')
runApp('try1.R')
runApp('try1.R')
runApp('try1.R')
runApp('try1.R')
runApp('try1.R')
runApp('try1.R')
runApp('try1.R')
runApp('try1.R')
runApp('try1.R')
runApp('try1.R')
runApp('try1.R')
runApp('try1.R')
runApp('try1.R')
runApp('try1.R')
example
c(example, a)
a
list(o = 1)
o = list(o = 1)
example
append(example, o)
runApp('try1.R')
runApp('try1.R')
runApp('try1.R')
runApp('try1.R')
runApp('try1.R')
Orange
runApp('try1.R')
runApp('try1.R')
beaver1
chickwts
runApp('try1.R')
runApp('try1.R')
chickwts
chickwts[, 1]
chickwts$weight
chickwts[[1]]
runApp('try1.R')
runApp('try1.R')
colnames(chickwts)
colnames(chickwts)[1]
parse(colnames(chickwts)[1])
runApp('try1.R')
runApp('try1.R')
runApp('try1.R')
runApp('try1.R')
runApp('try1.R')
runApp('try1.R')
runApp('try1.R')
assign(lala, 5)
assign("lala", 5)
lala
col_nam
data = chickwts
col_nam = colnames(data)
do.call("<<-", list(col_nam,"xxx"))
col_nam
weight
feed
assign(col_nam[1], data[, 1])
assign(col_nam[2], data[, 2])
chickwts[1, ]
chickwts[, 1]
chickwts[[1]]
chickwts$weight
runApp('try1.R')
parse("aaa")
parse("a")
a
parse('a')
parse(text = 'a')
runApp('try1.R')
runApp('try1.R')
runApp('try1.R')
runApp('try1.R')
runApp('try1.R')
runApp('try1.R')
runApp('try1.R')
runApp('try1.R')
plot(chickwts)
runApp('try1.R')
chickwts
runApp('try1.R')
runApp('try1.R')
runApp('try1.R')
runApp('try1.R')
runApp('try1.R')
runApp('try1.R')
mean(list(1:10, 0, FALSE))
mean(tagList(list(1:10, 0, FALSE)))
mean(tagList(1:10, 0, FALSE))
runApp('try1.R')
runApp('try1.R')
runApp('try1.R')
runApp('try1.R')
runApp('try1.R')
runApp('try1.R')
runApp('try1.R')
runApp('try1.R')
runApp('try1.R')
mtcars
runApp('try1.R')
runApp('try1.R')
CO2
runApp('try1.R')
sleep
rock
runApp('try1.R')
runApp('try1.R')
apply(1:10, 1, {x + 5})
apply(1:10, 1, {5})
runApp('try1.R')
a
length(a)
data
plt1 = ggplot(data = data, aes(...))+
geom_point()
#plot2
plt2 = ggplot(data = data, aes(...))+
geom_lines()
#plot3
plt3 = ggplot(data = data, aes(...))+
geom_point() +
geom_lines()
draw_plots = function(data, ...) {
#plot 1
plt1 = ggplot(data = data, aes(...))+
geom_point()
#plot2
plt2 = ggplot(data = data, aes(...))+
geom_lines()
#plot3
plt3 = ggplot(data = data, aes(...))+
geom_point() +
geom_lines()
list(plt1, plt2, plt3)
}
draw_plots(iris,  x = Sepal.Length, y = Petal.Length, col = Species)
draw_plots = function(data, ...) {
#plot 1
plt1 = ggplot(data = data, aes(...))+
geom_point()
#plot2
plt2 = ggplot(data = data, aes(...))+
geom_line()
#plot3
plt3 = ggplot(data = data, aes(...))+
geom_point() +
geom_line()
list(plt1, plt2, plt3)
}
draw_plots(iris,  x = Sepal.Length, y = Petal.Length, col = Species)
draw_plots(iris,  x = Sepal.Length, y = Petal.Length, col = Species) -> m
m[[1]]
runApp('try1.R')
runApp('try1.R')
runApp('try1.R')
m
m[[3]]
runApp('try1.R')
runApp('try1.R')
runApp('try1.R')
runApp('try1.R')
runApp('try1.R')
runApp('try1.R')
plots_list = draw_plots(data, ...)
plots_list
plots_list = m
for(i in 1:length(plots_list)) {
output[[paste0(panel, "_plot_", i)]] <- renderPlot({
plots_list[[i]]
})
output[[paste0(panel, "_tooltip_", i)]] <- renderUI({generate_tooltip(data, input[[paste0(panel, "_hover_", i)]])})
}
output = list()
for(i in 1:length(plots_list)) {
output[[paste0(panel, "_plot_", i)]] <- renderPlot({
plots_list[[i]]
})
output[[paste0(panel, "_tooltip_", i)]] <- renderUI({generate_tooltip(data, input[[paste0(panel, "_hover_", i)]])})
}
print(m[[1]])
runApp('try1.R')
a
a[[c(1, 2)]]
a[c(1, 2)]
a[[1]]
a[c(1, 2)] = c(4, 5)
a
a[c(3, 4)] = c(4, 5)
a
runApp('try1.R')
runApp('try1.R')
runApp('try1.R')
runApp('try1.R')
runApp('try1.R')
runApp('try1.R')
runApp('try1.R')
runApp('try1.R')
runApp('try1.R')
runApp('try1.R')
runApp('try1.R')
runApp('try1.R')
runApp('try1.R')
runApp('try1.R')
runApp('try1.R')
library(shiny); runApp('appppppppp.R')
runApp('appppppppp.R')
str(x = 7)
"a" = 15
a
id = "orange"
paste0(id, "_plot_out")
orange_plot_out = function(x) {x+5}
paste0(id, "_plot_out")(2)
runApp('app1.R')
runApp('app1.R')
runApp('app1.R')
runApp('app1.R')
runApp('app1.R')
runApp('app1.R')
runApp('appppppppp.R')
a
?assign
runApp('appppppppp.R')
runApp('appppppppp.R')
runApp('appppppppp.R')
runApp('appppppppp.R')
runApp('appppppppp.R')
runApp('appppppppp.R')
runApp('appppppppp.R')
runApp('appppppppp.R')
library(shiny); runApp('appppppppp.R')
runApp('appppppppp.R')
runApp('appppppppp.R')
runApp('appppppppp.R')
runApp('appppppppp.R')
runApp('appppppppp.R')
runApp('appppppppp.R')
runApp('appppppppp.R')
runApp('appppppppp.R')
runApp('appppppppp.R')
runApp('appppppppp.R')
runApp('appppppppp.R')
library(shiny); runApp('apap.R')
runApp('apap.R')
runApp('apap.R')
runApp('apap.R')
runApp('apap.R')
islands
PlantGrowth
rivers
volcano
trees
treering
sleep
runApp('apap.R')
runApp('apap.R')
runApp('apap.R')
runApp('apap.R')
runApp('apap.R')
runApp('apap.R')
runApp('apap.R')
runApp('apap.R')
trees
runApp('apap.R')
runApp('apap.R')
a = 5
name(a)
as.character(a)
deparse(substitute(a))
runApp('apap.R')
ui <- fluidPage(mainPanel(
column(width = 3,
br(),
numericInput_h("n_input", label = "Numeric input",
value = 1, min = 1, max = 5)),
column(width = 9,
generate_plot_tabPanel(list(title = "plots 1",
tabsetPanel_1 = "orange",
tabsetPanel_2 = "mtcars",
tabsetPanel_3 = "iris")),
tabPanel(title = "plots 2",
generate_tabsetPanel("CO2"),
br(),
generate_tabsetPanel("rock"),
br(),
generate_tabsetPanel("trees"))
# tabPanel(title = "plots 3",
#          generate_tabsetPanel("trees"),
#          br(),
#          generate_tabsetPanel("sleep"),
#          br(),
#          generate_tabsetPanel("iris"))
)
)
)
runApp('C:/Users/Kanti/Desktop/praktyki/hadex_components/appppppppp.R')
runApp('apap.R')
runApp('apap.R')
runApp('apap.R')
runApp('apap.R')
runApp('apap.R')
runApp('apap.R')
runApp('apap.R')
runApp('apap.R')
runApp('apap.R')
runApp('apap.R')
library(shiny); runApp('apap.R')
runApp('apap.R')
runApp('apap.R')
install.packages("svglite")
runApp('apap.R')
airmiles
airquality
attenu
runApp('apap.R')
runApp('apap.R')
attitude
austres
BJsales
beaver1
runApp('apap.R')
runApp('apap.R')
runApp('apap.R')
runApp('apap.R')
runApp('apap.R')
austres
runApp('apap.R')
BOD
cars
runApp('apap.R')
shiny::runApp()
install.packages("shinycssloaders")
install.packages("shinyhelper")
install.packages("svglite")
runApp()
runApp()
